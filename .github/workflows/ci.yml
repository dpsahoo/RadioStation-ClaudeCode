name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create environment file
      run: |
        cp .env.example .env
    
    - name: Run backend tests with coverage
      run: |
        pytest --cov=backend --cov-report=xml --cov-report=term-missing --cov-fail-under=80
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: tests/frontend/package-lock.json
    
    - name: Install frontend test dependencies
      run: |
        cd tests/frontend
        npm install
    
    - name: Run frontend tests
      run: |
        cd tests/frontend
        npm test -- --coverage --watchAll=false
    
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./tests/frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort
    
    - name: Check code formatting with Black
      run: |
        black --check backend/ tests/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only backend/ tests/
    
    - name: Lint with flake8
      run: |
        flake8 backend/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Check for security vulnerabilities with Safety
      run: |
        safety check --json || true
    
    - name: Security linting with Bandit
      run: |
        bandit -r backend/ -f json || true

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create environment file
      run: |
        cp .env.example .env
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
    
    - name: Test application startup
      run: |
        timeout 10s python backend/app.py || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi

  build-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check project structure
      run: |
        # Verify required files exist
        test -f README.md
        test -f LICENSE
        test -f requirements.txt
        test -f .env.example
        test -f backend/app.py
        test -f frontend/templates/radio.html
        test -d tests/
        echo "✅ All required files and directories exist"
    
    - name: Validate configuration files
      run: |
        # Check if .env.example has required variables
        grep -q "FLASK_SECRET_KEY" .env.example
        grep -q "DATABASE_PATH" .env.example
        grep -q "STREAM_URL" .env.example
        echo "✅ Configuration template is valid"